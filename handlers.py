import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from db import get_wallet, insert_wallet
from ton_client import generate_wallet, send_transaction, get_wallet_balance
from tonsdk.crypto import mnemonic_to_wallet_key

router = Router()

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ "balance" –∏ "help"
basic_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/wallet"), KeyboardButton(text="/export")],
        [KeyboardButton(text="/swap"), KeyboardButton(text="/send")],
        [KeyboardButton(text="/balance"), KeyboardButton(text="/help")]
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    wallet = await get_wallet(user_id)
    if wallet:
        await message.answer("‚úÖ –ö–æ—à–µ–ª–µ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=basic_keyboard)
        return
    try:
        wallet_address, mnemonic, public_key, private_key = generate_wallet()
        await insert_wallet(user_id, mnemonic, wallet_address, public_key)
        await message.answer(
            f"üîπ –ê–¥—Ä–µ—Å: `{wallet_address}`\n"
            f"üìù Seed Phrase: `{mnemonic}`\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ!** –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ seed phrase –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ. –û–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞.",
            reply_markup=basic_keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"Start error: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞")

@router.message(Command("wallet"))
async def cmd_wallet(message: Message):
    user_id = message.from_user.id
    wallet = await get_wallet(user_id)
    if wallet:
        await message.answer(f"üíº –ê–¥—Ä–µ—Å: `{wallet[1]}`", parse_mode="Markdown")
    else:
        await message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.message(Command("export"))
async def cmd_export(message: Message):
    user_id = message.from_user.id
    wallet = await get_wallet(user_id)
    if not wallet:
        await message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    try:
        await message.answer(
            f"üîë Seed Phrase:\n`{wallet[0]}`\n\n‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ—ë –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ!",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"Export error: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞")

@router.message(Command("balance"))
async def cmd_balance(message: Message):
    user_id = message.from_user.id
    wallet = await get_wallet(user_id)
    if not wallet:
        await message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    try:
        balances = get_wallet_balance(wallet[1])
        balance_text = "\n".join(f"{token}: {balance:.5f}" for token, balance in balances.items() if balance != 0 or token.upper() == "TON")
        await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å—ã:\n{balance_text}", parse_mode="Markdown")
    except Exception as e:
        logging.error(f"Balance error: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üÜò **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:**\n\n"
        "/start - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫\n"
        "/wallet - –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n"
        "/export - –ü–æ–∫–∞–∑–∞—Ç—å seed phrase –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤\n"
        "/swap - –û–±–º–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)\n"
        "/send - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )
    await message.answer(help_text, parse_mode="Markdown")
        
# --- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è swap ---
class SwapStates(StatesGroup):
    from_token = State()
    to_token = State()
    amount = State()
    confirmation = State()
        
@router.message(Command("swap"))
async def cmd_swap_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    wallet = await get_wallet(user_id)
    if not wallet:
        await message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ /start")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, TON)")
    await state.set_state(SwapStates.from_token)
        
@router.message(SwapStates.from_token)
async def swap_from_token(message: Message, state: FSMContext):
    from_token = message.text.strip().upper()
    if from_token != "TON":
        await message.answer("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–±–º–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–∞ TON.")
        await state.clear()
        return
    await state.update_data(from_token=from_token)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT)")
    await state.set_state(SwapStates.to_token)
        
@router.message(SwapStates.to_token)
async def swap_to_token(message: Message, state: FSMContext):
    to_token = message.text.strip().upper()
    if to_token not in ["TON", "USDT"]:
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ TON –∏ USDT.")
        await state.clear()
        return
    await state.update_data(to_token=to_token)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.23456)")
    await state.set_state(SwapStates.amount)
        
@router.message(SwapStates.amount)
async def swap_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(amount=amount)
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: –∫–æ–º–∏—Å—Å–∏—è –Ω–µ –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –∫–æ–º–∏—Å—Å–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    preview = (
        f"–û–±–º–µ–Ω: {amount:.5f} { (await state.get_data())['from_token'] } –Ω–∞ { (await state.get_data())['to_token'] }\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–±–º–µ–Ω? (–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"
    )
    await message.answer(preview)
    await state.set_state(SwapStates.confirmation)
        
@router.message(SwapStates.confirmation)
async def swap_confirmation(message: Message, state: FSMContext):
    confirmation = message.text.strip().lower()
    if confirmation != "–¥–∞":
        await message.answer("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.")
        await state.clear()
        return
    data = await state.get_data()
    # –ó–¥–µ—Å—å —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–º–µ–Ω —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π exchange-–∞–¥—Ä–µ—Å
    exchange_address = "EQEXCHANGEADDRESS00000000000000000000000000000000"
    sender_mnemonic = (await get_wallet(message.from_user.id))[0]
    wallet_keys = mnemonic_to_wallet_key(sender_mnemonic)
    sender_private_key, _ = wallet_keys
    sender_address = (await get_wallet(message.from_user.id))[1]
    try:
        tx_result = send_transaction(sender_private_key, sender_address, exchange_address, data["amount"])
        await message.answer(f"‚úÖ –û–±–º–µ–Ω –ø—Ä–æ–≤–µ–¥–µ–Ω!\nResponse: {tx_result}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞: {e}")
    await state.clear()
        
# --- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è send ---
class SendStates(StatesGroup):
    token = State()
    recipient = State()
    amount = State()
    confirmation = State()
            
@router.message(Command("send"))
async def cmd_send_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    wallet = await get_wallet(user_id)
    if not wallet:
        await message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ /start")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TON)")
    await state.set_state(SendStates.token)
            
@router.message(SendStates.token)
async def send_token(message: Message, state: FSMContext):
    token = message.text.strip().upper()
    if token != "TON":
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ TON.")
        await state.clear()
        return
    await state.update_data(token=token)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await state.set_state(SendStates.recipient)
            
@router.message(SendStates.recipient)
async def send_recipient(message: Message, state: FSMContext):
    recipient = message.text.strip()
    await state.update_data(recipient=recipient)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.23456)")
    await state.set_state(SendStates.amount)
            
@router.message(SendStates.amount)
async def send_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(amount=amount)
    preview = (
        f"–û—Ç–ø—Ä–∞–≤–∫–∞: {amount:.5f} { (await state.get_data())['token'] }\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É? (–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"
    )
    await message.answer(preview)
    await state.set_state(SendStates.confirmation)
            
@router.message(SendStates.confirmation)
async def send_confirmation(message: Message, state: FSMContext):
    confirmation = message.text.strip().lower()
    if confirmation != "–¥–∞":
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return
    data = await state.get_data()
    sender_mnemonic = (await get_wallet(message.from_user.id))[0]
    wallet_keys = mnemonic_to_wallet_key(sender_mnemonic)
    sender_private_key, _ = wallet_keys
    sender_address = (await get_wallet(message.from_user.id))[1]
    try:
        tx_result = send_transaction(sender_private_key, sender_address, data["recipient"], data["amount"])
        await message.answer(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nResponse: {tx_result}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    await state.clear()
            
